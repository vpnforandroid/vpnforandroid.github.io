<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnforandroid.github.io/news/article-63074.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Spring的两种依赖注入方式:setter方法注入与构造方法注入</title>
        <meta name="description" content="&nbsp; &nbsp;Spring的两种依赖注入方式：setter注入与构造方法注入，这两种方法的不同主要就是在xml文件下对应使用property和constructor-arg属性， 例如： " />
        <link rel="icon" href="/assets/website/img/trojannode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN安卓 订阅机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnforandroid.github.io/news/article-63074.htm" />
    <meta property="og:site_name" content="VPN安卓 订阅机场节点官网" />
    <meta property="og:title" content="Spring的两种依赖注入方式:setter方法注入与构造方法注入" />
    <meta property="og:image" content="https://vpnforandroid.github.io/uploads/20240807/ff0ebe3906840a9e154cb1487cffd99b.webp" />
        <meta property="og:release_date" content="2025-02-25T05:02:02" />
    <meta property="og:updated_time" content="2025-02-25T05:02:02" />
        <meta property="og:description" content="&nbsp; &nbsp;Spring的两种依赖注入方式：setter注入与构造方法注入，这两种方法的不同主要就是在xml文件下对应使用property和constructor-arg属性， 例如： " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring的两种依赖注入方式:setter方法注入与构造方法注入">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/trojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/remixicon/remixicon.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/trojannode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XZJRB5RDTD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XZJRB5RDTD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top ">
        <div class="container d-flex align-items-center justify-content-between">
            <a href="/">
                        <span class="logo">VPN安卓</span>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>Spring的两种依赖注入方式:setter方法注入与构造方法注入</h2>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>&nbsp; &nbsp;<span style="font-size:18px">Spring的两种依赖注入方式：setter注入与构造方法注入，这两种方法的不同主要就是在xml文件下对应使用property和constructor-arg属性， 例如：</span></p> <blockquote style="margin:0 0 0 40px; border:none; padding:0px"> <p><span style="font-size:18px">property属性：&lt;property name="id" value="123"&gt;&lt;/property&gt;(其中name的值为原类中的属性名)</span></p> <p><span style="font-size:18px"><span style="font-size:18px">constructor-arg属性：</span>&lt;constructor-arg index="0" value="456"&gt;&lt;/constructor-arg&gt;(其中index的值为0~n-1，n代表构造函数中的输入参数的数量)</span></p> <p><span style="font-size:18px"><br /></span></p> </blockquote> <p><span style="font-size:24px">1.setter方法注入</span></p> <p><span style="font-size:18px">&nbsp; &nbsp;setter方法注入即是创建一个普通的JavaBean类，为需要注入的属性通过对应的setter方法即可，如：</span></p> <p><span style="font-size:18px">（1）创建一个Id类：</span></p> <p><span style="font-size:18px"></span></p> <pre><code class="language-java">package com.loster.li;  public class Id { 	private int id; 	private String name; 	public int getId() { 		return id; 	} 	public void setId(int id) { 		this.id = id; 	} 	public String getName() { 		return name; 	} 	public void setName(String name) { 		this.name = name; 	} }</code></pre> <p><span style="font-size:18px">（2）创建配置文件Id_Bean.xml</span><br /> </p> <pre><code class="language-html">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;             	&lt;bean id="id" class="com.loster.li.Id"&gt; 	&lt;property name="id" value="123"&gt;&lt;/property&gt; 	&lt;property name="name" value="xiaoli"&gt;&lt;/property&gt; 	&lt;/bean&gt; &lt;/beans&gt;</code></pre> <p><span style="font-size:18px">（3）编写测试类IdTest.java，并运行：</span></p> <pre><code class="language-java">package com.loster.li;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class IdTest { 	public static void main(String[] args){ 		ClassPathXmlApplicationContext context = new  				ClassPathXmlApplicationContext("com/loster/li/Id_Bean.xml"); 		 		Id id = (Id)context.getBean("id"); 		System.out.println(id.getId()); 		System.out.println(id.getName()); 	} }</code></pre> <p>&nbsp; &nbsp;<br /> <span style="font-size:18px">运行结果如下：</span> </p> <div style="text-align:center">  <img decoding="async" src="http://img.555519.xyz/uploads/20230217/d956e5a60bc0926d3e98808895f6e924.jpg" alt="Spring的两种依赖注入方式:setter方法注入与构造方法注入" width="221" height="38"> </div> <p><span style="font-size:18px"></p> <p></span> </p> <p><span style="font-size:18px"><span style="font-size:24px">2.构造方法注入</span><br /></span></p> <p><span style="font-size:18px">（1）将上面的Id.class修改为：</span></p> <p><span style="font-size:18px"></span></p> <pre><code class="language-java">package com.loster.li;  public class Id { 	private int id; 	private String name; 	public Id(int id,String name){ 		this.id = id; 		this.name = name; 	} 	public int getId() { 		return id; 	} 	public void setId(int id) { 		this.id = id; 	} 	public String getName() { 		return name; 	} 	public void setName(String name) { 		this.name = name; 	} }</code></pre> <p><span style="font-size:18px">（2）将上面的Id_Bean.xml修改为：</span> </p> <p><span style="font-size:18px"></span></p> <pre><code class="language-html">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;             	&lt;bean id="id" class="com.loster.li.Id"&gt; 	&lt;constructor-arg index="0" value="456"&gt;&lt;/constructor-arg&gt; 	&lt;constructor-arg index="1" value="dawang"&gt;&lt;/constructor-arg&gt; 	&lt;/bean&gt; &lt;/beans&gt;</code></pre> <p><span style="font-size:18px">（3）再次运行IdTest.java，运行结果如下：</span> </p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img decoding="async" src="http://img.555519.xyz/uploads/20230217/ca38ec4e7c2266eada3fbe4b3a9cb5e4.jpg" alt="Spring的两种依赖注入方式:setter方法注入与构造方法注入" width="109" height="40"></p> <p><span style="font-size:18px"></p> <p></span></p> <p><span style="font-size:18px"><br /></span></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-62478.htm">Vue结合ElementUI上传Base64编码后的图片实例_vue.js</a></p>
                                        <p>下一个：<a href="/news/article-63075.htm">微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-63074.htm" title="Spring的两种依赖注入方式:setter方法注入与构造方法注入">Spring的两种依赖注入方式:setter方法注入与构造方法注入</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-clash-v2ray-ss-ssr.htm" title="VPN安卓 | 2月23日21.5M/S|免费Shadowrocket/Clash/SSR/V2ray免费节点订阅分享">VPN安卓 | 2月23日21.5M/S|免费Shadowrocket/Clash/SSR/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-63664.htm" title="Java权限修饰符">Java权限修饰符</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-25-free-v2ray-subscribe.htm" title="VPN安卓 | 2月25日21.8M/S|免费V2ray/Shadowrocket/Clash/SSR免费节点订阅分享">VPN安卓 | 2月25日21.8M/S|免费V2ray/Shadowrocket/Clash/SSR免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-62477.htm" title="tf.keras.layers.Conv1D和tf.keras.layers.Conv1DTranspose">tf.keras.layers.Conv1D和tf.keras.layers.Conv1DTranspose</a></li>
                        <li class="py-2"><a href="/news/article-61882.htm" title="预制菜料理包十大排行">预制菜料理包十大排行</a></li>
                        <li class="py-2"><a href="/news/article-61883.htm" title="我喜欢实实在在的人的句子（风雨沙坡头电视剧）新鲜出炉，">我喜欢实实在在的人的句子（风雨沙坡头电视剧）新鲜出炉，</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-24-free-node-subscribe-links.htm" title="VPN安卓 | 2月24日18M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享">VPN安卓 | 2月24日18M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-62478.htm" title="Vue结合ElementUI上传Base64编码后的图片实例_vue.js">Vue结合ElementUI上传Base64编码后的图片实例_vue.js</a></li>
                        <li class="py-2"><a href="/news/article-63075.htm" title="微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习">微服务架构学习与思考(09)：分布式链路追踪系统-dapper论文学习</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <a href="/">VPN安卓 订阅机场节点官网</a> 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-right pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/trojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/trojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/trojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>